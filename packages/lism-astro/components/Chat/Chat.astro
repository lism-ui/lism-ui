---
import { LismProps } from '../types';
import { Lism } from '../Lism';
import { Decorator } from '../Decorator';
import { Grid } from '../Grid';
import ChatName from './ChatName.astro';
import ChatAvatar from './ChatAvatar.astro';
import ChatContent from './ChatContent.astro';
import ChatFooter from './ChatFooter.astro';
import { getProps, getDecoProps, getContentProps } from '@lism-ui/core/components/Chat/getProps';

interface Props extends LismProps {}

let {
	_lismClass = [],
	lismState = [],
	name,
	avatar,
	footer,
	variant = 'speak',
	direction = 'start',
	isFlow = 's',
	bodyProps = {},
	contentProps = {},
	...props
} = Astro.props || {};

_lismClass.push(`c--chat c--chat--${direction}`);
if (variant) _lismClass.push(`c--chat--${variant}`);

const hasName = name || Astro.slots.has('name');
const hasFooter = footer || Astro.slots.has('footer');
// const hasAvatar = avatar || Astro.slots.has('avatar');
---

<Grid _lismClass={_lismClass} lismState={lismState} {...getProps(direction, variant)} {...props}>
	{avatar && <ChatAvatar src={avatar} />}
	{hasName && <ChatName>{name || <slot name='name' />}</ChatName>}
	<Lism _lismClass={['c--chat__body']} {...props}>
		{
			('speak' === variant || 'think' === variant) && (
				<Decorator {...getDecoProps(direction, variant)} />
			)
		}
		<Lism
			_lismClass={['c--chat__content']}
			isFlow={isFlow}
			{...getContentProps(direction, variant, contentProps)}
		>
			<slot />
		</Lism>
	</Lism>
	{hasFooter && <ChatFooter>{footer || <slot name='footer' />}</ChatFooter>}
</Grid>
