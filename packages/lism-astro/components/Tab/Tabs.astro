---
import { LismProps } from '../types';
import { Grid } from '../Grid';
import TabList from './TabList.astro';
import Tab from './Tab.astro';
import TabPanel from './TabPanel.astro';
import { uuidv4 } from '../helper/index.js';
import transformTabitems from './transformTabitems.js';
import getTabsProps from '@lism-ui/core/components/Tabs/getProps';

// import TheTab from './TheTab.astro';}
// slotsについて: https://docs.astro.build/ja/reference/api-reference/#astroslots

// Propsの定義
interface Props extends LismProps {
	uid?: string | number;
	defaultIndex?: string | number;
}
// propsの取得
const { defaultIndex = 0, uid, tabProps = {}, ...props } = Astro.props || {};

// 生成したhtmlを格納する配列
const tabID = uid ? uid : uuidv4();

// 子要素の方から順番に処理されていくので、文字列処理でデータを抽出する。(より厳密に処理するなら、rehype などでHTMLをパースして処理を行った方がいいかも)
const { btns, panels } = transformTabitems(
	await Astro.slots.render('default'),
	tabID,
	defaultIndex
);

const { tabsProps, listProps, panelProps } = getTabsProps(props);

const hasItems = btns.length > 0;
---

<Grid {...tabsProps}>
	{
		hasItems ? (
			<>
				<TabList {...listProps}>
					{btns.map((btn, index) => {
						return (
							<Tab tabID={tabID} index={index} isActive={btn.isActive} {...tabProps}>
								<Fragment set:html={btn.content} />
							</Tab>
						);
					})}
				</TabList>
				{panels.map((panel, index) => {
					return (
						<TabPanel
							tabID={tabID}
							index={index}
							isActive={panel.isActive}
							{...panelProps}
						>
							<Fragment set:html={panel.content} />
						</TabPanel>
					);
				})}
			</>
		) : (
			<slot />
		)
	}
</Grid>

<script>
	// import setEvent from './setEvent';
	import setEvent from '@lism-ui/core/components/Tabs/setEvent';
	const tabsAll = document.querySelectorAll('.c--tabs');
	tabsAll.forEach((tabs) => {
		setEvent(tabs);
	});
</script>
