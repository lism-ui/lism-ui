---
// import { randomUUID } from 'node:crypto';
// import { v4 as uuidv4 } from 'uuid';
import { uuidv4 } from '../../helper/index.js';
// ※ randomUUID は 使えないかも。

// import TheTab from './TheTab.astro';}
// slotsについて: https://docs.astro.build/ja/reference/api-reference/#astroslots

// export interface Props {
// 	items: any[];
// }

// const { items = [] } = Astro.props;
// console.log(uuidv4());

const items = [];
// const uuid = randomUUID();
const uuid = uuidv4();
const defaultIndex = 0;
// let tabContentHTML = await Astro.slots.render('default');
// console.log('Astro.slots', Astro.slots);

// 子要素の方から順番に処理されていくので、置換処理で大丈夫そう。
// 厳密に処理するなら、rehype などでHTMLをパースして処理を行う。

// <lism-placeholder-tabitem>　→ div.tabitem へ 変換
function transformHTML(htmlString) {
	let index = 0;

	const transformedString = htmlString.replace(
		/<lism-placeholder-tabitem>(.*?)<\/lism-placeholder-tabitem>/gs,
		function (match, innerContent) {
			const TAB_ID = `${uuid}-${index}`;
			const isActiveBtn = index === defaultIndex;
			index++;
			// console.log(`====== match@${uuid} ======`);
			// console.log(match);
			// console.log(`----------------------------`);
			innerContent = innerContent.replace(
				/<lism-placeholder-tabitem-label>(.*?)<\/lism-placeholder-tabitem-label>/s,
				function (match, innerContent) {
					// items.push(`${innerContent}`);
					// console.log(`====== match@${uuid} ======`);
					// console.log(innerContent);
					// console.log(`----------------------------`);
					const ariaSelected = isActiveBtn ? 'true' : 'false';
					items.push(
						`<button role="tab" class="l--tab__button"` +
							` aria-selected="${ariaSelected}"` +
							` aria-controls="${TAB_ID}">${innerContent}</button>`
					);
					return '';
				}
			);

			const ariaHidden = isActiveBtn ? 'false' : 'true';
			return (
				`<div class="l--tab__panel" role="tabpanel" id="${TAB_ID}" ` +
				` aria-hidden="${ariaHidden}">${innerContent}</div>`
			);

			// return `<div data-index="${uuid}-${index++}">...</div>`;
		}
	);

	return transformedString;
}

const tabContentHTML = transformHTML(await Astro.slots.render('default'));
// console.log(`====== 変換後の HTML@${uuid} ======`);
// console.log(tabContentHTML);
// console.log(`----------------------------`);
// tabID を　生成して、navとpanelに渡したい
---

<div class='l--tab'>
	<div class='l--tab__list' role='tablist'>
		{items.map((label, index) => <Fragment key={index} set:html={label} />)}
	</div>
	<div class='l--tab__panels'>
		<Fragment set:html={tabContentHTML} />
	</div>
</div>

<script src='./script.js'></script>
