// --------------------
// divider
// --------------------
// :where(.c--divider) {}
.c--divider {
	--bdc: var(--divider-bdc);
	--bdw: 1px;
	--bds: solid;
	place-self: stretch;
	// min-width: 1em;
	// min-height: 1em;
}

.c--divider__bd {
	--bdc: inherit;
	--bdw: inherit;
	--bds: inherit;
	// border-top: var(--bdw) var(--bds) var(--bdc);
	flex: 1;
}

// :where(.l--stack) > .c--divider__bd {
// 	border-top: none;
// 	border-left: var(--bdw) var(--bds) var(--bdc);
// }

// --------------------
// shapeDivider
// --------------------

// heightが.-h:で上書きできるかあとでチェック
.c--shapeDivider {
	// --c: var(--base);
	--level: 0;
	--duration: 12s;
	--offset: 0;
	--stretch: 1;
	--scaleX: 1;
	--scaleY: 1;
	--trnslt: 0 0.5px;
	// --rotateX: 0deg;
	// --rotateY: 0deg;

	position: relative;
	overflow: hidden;
	color: var(--base);

	// 高さを svg ではなく親でセットしているのは、 <Divider h='hoge'> で簡単に上書きできるようにするため。
	// 600px時点を最小値, 1200px時点を最大値にして、clampで高さを変動させる
	height: clamp(calc(6px * var(--level)), calc(1cqw * var(--level)), calc(12px * var(--level)));
	max-width: 100%; // is--constrained の影響を受けないようにする

	scale: var(--scaleX) var(--scaleY);
	translate: var(--trnslt);

	// 上下にわずかな隙間ができてしまうのを防ぐ
	&[data-flip*='y'] {
		// top: -0.5px;
		--scaleY: -1;
		--trnslt: 0 -0.5px;
	}
	&[data-flip*='x'] {
		--scaleX: -1;
	}
	// &:not([data-flip*='y']) {
	// 	bottom: -0.5px;
	// }
}

.c--shapeDivider__inner {
	// position: relative;
	// inset: 0;
	scale: var(--stretch) 1;
	translate: var(--offset);
	// height: 100%;
}

.c--shapeDivider__svg {
	// display: block;
	// width: 100%;
	// height: 100%;

	// color: inherit;
	// path {
	// 	fill: currentColor;
	// }
}

// .c--divider[data-animation] .c--shapeDivider__svg {}

// has--animation?
// 左右にスライドする
@keyframes LismDividerSlideX {
	0% {
		transform: scaleX(4);
	}
	100% {
		transform: scaleX(4) translateX(calc(100% - 25%));
	}
}

.c--shapeDivider__svg.-animation {
	/* ↓ X 100% にしてるのは translateXのcalc計算で * -1 をしなくていいように。*/
	transform-origin: 100% 0;
	animation: LismDividerSlideX var(--duration) infinite alternate linear;
}
