/* ------------------------------------------------------------
	段階的な値は基本的に 10単位で。
		→ 0, (5), 10, 20, 30,...
		→ なぜ 基本単位が 1 ではなく 10 か。 → 間の数値をユーザーがカスタマイズで増やせるように。

	レイヤー的な段階値
		→ ..., -2, -1, 0, 1,2,3...

	カラーの段階値は 100,200,300 ?　→ 10,20,...に揃えてもいいか。

	真ん中のデフォルト値があって、そこから見て小さいか大きいか
	 →　..., 3xs, 2xs, xs, s,  m||root,  l, xl, 2xl, 3xl...

 ------------------------------------------------------------ */

:root {
	// コンテンツの左右の余白
	// --gutter: 2rem;
	--gutter: var(--s--40);

	// ボーダーカラー
	// --ls--bdc--table: #dcdcdc;

	// hoverユーティリティ用 → --ls--?
	--hov--duration: 0.3s;

	// --table--bdc:
	--th-bgc: var(--base-2);

	// collape にしているので、tfoot 1pxだと見えないことに注意。
	--thead-bd: solid 2px var(--content);
	--tfoot-bd: solid 2px var(--content);
	--table-bdc: var(--base-3);
	--divider-bdc: var(--base-3);

	--link-c: #0c61e4;
	// --link-underlineOffset: 0.2ex;

	--focus--color: revert;
	--focus--outlineOffset: 1px;

	// --code-c: var(--content);
	// --code-bgc: var(--base-2);
	--code-c: currentColor;
	--code-bgc: color-mix(in srgb, transparent, currentColor 4%);

	// flexの方向検知
	--isRow: 0;

	/* ------------------------------------------------------------
	  コンテンツサイズ: ユーザー側で定義が必要
	    コンテンツサイズは960 ~ 1120 くらいがよさそう.
	    1080 にしてるのは、 1920 * 1080画像がきれいに配置できるため？
	------------------------------------------------------------ */
	// コンテンツサイズは960 ~ 1120 くらいがよさそう. @lg よりは大きく?
	// --size--xl: 1600px;
	--size--l: 1440px; // = --wp--style--global--wide-size. alignwide で使う.
	--size--m: 1120px; // = --wp--style--global--content-size.
	--size--s: 45rem; // slim幅1カラムテンプレートで使う. fz:16px時 = 720px
	--size--xs: 30rem;

	--size--item: 16em; // タイルグリッドなどのアイテムサイズの標準値

	// --contentSize--full: 特殊

	/* ------------------------------------------------------------
	    タイポグラフィ
	------------------------------------------------------------ */

	// --ff--sans: sans-serif;
	--ff--serif: serif;
	// --ff--sans: 'Hiragino Kaku Gothic ProN', 'Hiragino Sans', 'Meiryo', sans-serif;
	--ff--sans: -apple-system, 'BlinkMacSystemFont', 'Hiragino Kaku Gothic ProN', 'Hiragino Sans',
		Meiryo, sans-serif, 'Segoe UI Emoji';
	// --ff--sans: 'Hiragino Kaku Gothic ProN', 'Hiragino Sans', 'Meiryo', sans-serif;
	--ff--mono: Menlo, Consolas, monaco, monospace;
	--ff--emoji: 'Apple Color Emoji', 'Segoe UI Emoji', 'Noto Color Emoji', 'Android Emoji',
		'Segoe UI Symbol';

	--ff--root: var(--ff--sans);
	--ff--heading: var(--ff--sans);

	// ------------------------------
	// font-weight
	// ------------------------------
	--fw--bold: 700;
	--fw--thin: 100;

	// ------------------------------
	// letter-spacing
	// ------------------------------
	--lts--root: normal;
	--lts--s: -0.05em;
	--lts--l: 0.05em;
	--lts--xl: 0.25em;

	// --lts---2: -0.05em;
	// --lts---1: -0.025em;
	// --lts--0: 0em;
	// --lts--1: 0.025em;
	// --lts--2: 0.05em;
	// --lts--3: 0.075em;
	// --lts--4: 0.1em;
	// --lts--5: 0.25em;
	// --lts--6: 0.5em;

	// ------------------------------
	// font-size 変数
	// ------------------------------
	// font-size 変数
	--fz--root: clamp(0.875rem, 0.625rem + 1vw, 1rem); // 400 - 600
	// --fz--hero?
	--fz--m: 1em; // デフォルトでフォントサイズ 変わっているものを1emにリセットしたい時に必要
	--fz--r: 1rem; // → --fz--base?

	// 倍音列(分子8) での計算値
	--fz--5xl: 4em; //calc(1em * 8 / 2);
	--fz--4xl: 2.667em; // calc(1em * 8 / 3);
	--fz--3xl: 2em; //calc(1em * 8 / 4);
	--fz--2xl: 1.6em; //calc(1em * 8 / 5);
	--fz--xl: 1.333em; //calc(1em * 8 / 6);
	--fz--l: 1.143em; //calc(1em * 8 / 7);
	--fz--s: 0.889em; // calc(1em * 8 / 9);
	--fz--xs: 0.8em; //calc(1em * 8 / 10);
	--fz--2xs: 0.727em; //calc(1em * 8 / 11);

	// --fzMolecule: 8; // 7~9に対応.
	// --fz--5xl: min(5em, calc(1em * var(--fzMolecule) / (var(--fzMolecule) - 6)));
	// --fz--4xl: min(4em, calc(1em * var(--fzMolecule) / (var(--fzMolecule) - 5)));
	// --fz--3xl: calc(1em * var(--fzMolecule) / (var(--fzMolecule) - 4));
	// --fz--2xl: calc(1em * var(--fzMolecule) / (var(--fzMolecule) - 3));
	// --fz--xl: calc(1em * var(--fzMolecule) / (var(--fzMolecule) - 2));
	// --fz--l: calc(1em * var(--fzMolecule) / (var(--fzMolecule) - 1));
	// --fz--s: calc(1em * var(--fzMolecule) / (var(--fzMolecule) + 1));
	// --fz--xs: calc(1em * var(--fzMolecule) / (var(--fzMolecule) + 2));
	// --fz--2xs: calc(1em * var(--fzMolecule) / (var(--fzMolecule) + 3));

	// clampでテキストサイズを変化させたい領域に指定する
	// --fz-fluid--s: clamp(0.9rem, 0.75rem + 0.8cqw, 1rem); // 小さい方向のみ. 300: .9rem ~ 500: 1rem
	// --fz-fluid: clamp(0.9rem, 0.8rem + 0.5cqw, 1.1rem); // 上下両方. 320: .9rem ~ 960: 1.1rem
	// --fz-fluid--l: clamp(1rem, 0.9rem + 0.25cqw, 1.1rem); // 大きい方向のみ 640: 1rem a~ 960: 1.1rem

	// ------------------------------
	// line-height 変数
	// ------------------------------
	// tight snug - relaxed loose or shorter short - tall taller ?
	--lh--root: 1.75;
	--lh--xs: calc(var(--lh--root) - 0.25);
	--lh--s: calc(var(--lh--root) - 0.125);
	--lh--l: calc(var(--lh--root) + 0.125);
	--lh--xl: calc(var(--lh--root) + 0.25);

	// 1~9 だと普通の数値指定と区別がつかないので単位は10
	// --lh--10: 1;
	// --lh--20: 1.125;
	// --lh--30: 1.25;
	// --lh--40: 1.375;
	// --lh--50: 1.5;
	// ...

	// ------------------------------------------------------------
	// カラー
	// ------------------------------------------------------------

	// --------------------
	// パレットカラー
	// --------------------
	--hsl-black: 0 0% 0%;
	--hsl-white: 0 0% 100%;
	--hsl-gray: 210 12% 40%;
	--hsl-red: 4 72% 50%;
	--hsl-orange: 28 76% 50%;
	--hsl-yellow: 46 76% 48%;
	--hsl-green: 145 80% 40%;
	--hsl-blue: 205 76% 50%;
	--hsl-purple: 258 72% 50%;
	--hsl-pink: 325 72% 50%;
	--black: hsl(var(--hsl-black));
	--white: hsl(var(--hsl-white));
	--gray: hsl(var(--hsl-gray));
	--red: hsl(var(--hsl-red));
	--orange: hsl(var(--hsl-orange));
	--yellow: hsl(var(--hsl-yellow));
	--green: hsl(var(--hsl-green));
	--blue: hsl(var(--hsl-blue));
	--purple: hsl(var(--hsl-purple));
	--pink: hsl(var(--hsl-pink));

	// --------------------
	// basic カラー
	// --------------------

	// ベースカラーに合わせたカラーを段階的に用意
	// --hs--bc: 215 8%;
	// --hsl--bc: 215 8% 60%;

	// n50?
	// --b50: hsl(var(--hs--bc) 99%);
	// --b100: hsl(var(--hs--bc) 96%);
	// --b200: hsl(var(--hs--bc) 92%);
	// --b300: hsl(var(--hs--bc) 84%);
	// --b400: hsl(var(--hs--bc) 72%);
	// --b500: hsl(var(--hs--bc) 60%);
	// --b600: hsl(var(--hs--bc) 48%);
	// --b700: hsl(var(--hs--bc) 36%);
	// --b800: hsl(var(--hs--bc) 24%); // 淡い文字色 strong背景色
	// --b900: hsl(var(--hs--bc) 12%); // ほんの少しだけ淡い文字色.
	// --b950: hsl(var(--hs--bcc) 8%); // 文字色

	// --------------------
	// キーワードカラー main(brand?), accent, base, content
	// --------------------

	// --color--: 文字色・背景色など共通して採用されるカラー
	--main: #1e4e6b;
	--accent: #bc3453;
	--accent-2: #bc3453;
	--accent-3: #bc3453;

	// base
	--base-hs: 215 12%;
	--base: hsl(var(--base-hs) 99%);
	--base-2: hsl(var(--base-hs) 95%);
	--base-3: hsl(var(--base-hs) 88%); // border に使う

	// content
	--content: hsl(215 8% 8%);
	--content-2: hsl(215 4% 32%);
	--content-3: hsl(225, 4%, 50%); //hsl(200, 12%, 92%);

	// divider (border-color)
	// --divider?

	// accent, accent-2, accent-3
	// base, base-2, base-3 … 基本、濃くなっていく
	// content, content-2, content-3 …　基本、薄くなっていく

	// ボーダーはどちらでも使える感じか。
	// --bdc-pale,base,strong

	// pale→subtle?

	// c(txc?),bgc,bdc

	// old
	// --c--base: rgb(240, 144, 216);
	// --c--oppoite: rgb(214, 240, 144);
	// --bgc--base: rgb(214, 240, 144);
	// --bgc--opposite: rgb(240, 144, 216);
	// --c--pale: green;
	// --bgc--pale: red;

	/* ------------------------------------------------------------
	  カラー: ユーザー側で定義できる仕組みも必要
	------------------------------------------------------------ */
	// フィボナッチ数列 0, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89,
	// 0 .25rem, .5rem, .75rem, 1.25rem, M:(8):2rem, 3.25rem, 5.25rem, 8.5rem

	// 30: 2rem 前後

	// --sUnit: 1rem;
	// --s--0: 0rem;

	// 1=0.25での Fibonacci数列, 5は例外的に 0.125 をセット
	// --s--5: 0.25rem;
	// --s--10: 0.5rem;
	// --s--20: 0.75rem;
	// --s--30: 1.25rem;
	// --s--40: 2rem;
	// --s--50: 3.25rem;
	// --s--60: 5.25rem;
	// --s--70: 8.5rem;

	// 1=0.125 Fibonacci数列
	--s--1: 0.125rem;
	--s--5: 0.25rem;
	--s--10: 0.375rem;
	// --s--15: 0.375rem;
	--s--20: 0.625rem;
	--s--30: 1rem;
	--s--40: 1.625rem;
	--s--50: 2.625rem;
	--s--60: 4.25rem;
	--s--70: 6.875rem;
	--s--80: 11.125rem;
	--s--90: 18rem;

	// ここから等比数列?
	// --s--70: calc(var(--s--60) * 1.5);
	// --s--80: calc(var(--s--70) * 1.5);
	// --s--90: calc(var(--s--80) * 1.5);

	// --g--2,4,6,8,...にしてもいいか。or, --S--, --s-- で分ける...?（gapのg)
	--em--1: 0.125em; // 2
	--em--2: 0.25em; // 4
	--em--3: 0.375em; // 6
	// --em--4: 0.4;
	--em--5: 0.5em; // 8
	--em--6: 0.625em; // 10
	--em--7: 0.75em; // 12
	--em--8: 0.875em; // 14
	// --em--9: .9em;
	--em--10: 1em; // 16
	// --em--15: 1.5em;
	// --em--20: 2em;
	// --em--25: 2.5em;
	// --em--30: 3em;

	--s-2: 0.125em; // 2
	--s-4: 0.25em; // 4
	--s-6: 0.375em; // 6
	--s-8: 0.5em; // 8
	--s-10: 0.625em; // 10
	--s-12: 0.75em; // 12
	--s-14: 0.875em; // 14
	--s-16: 1em; // 16
	--s-24: 1.5em; // 24
	--s-32: 2em;

	// --p--box--s: 0.75em 0.875em;
	// --p:box:{padding: var(--p--box) calc(--p--box + 0.125em);}
	--p--box--s: 0.625em 0.75em;
	--p--box: 0.875em 1em;
	--p--box--l: 1.375em 1.5em;

	// .is--flow の blockGap 管理用変数
	--flowGap--s: var(--s--20); // --mbs--s?
	--flowGap--m: var(--s--40); // --mbs--m?
	--flowGap--l: var(--s--50);
	--flowGap--htag: 2.5em; // var(--s--50); // フォントサイズ依存

	/* ------------------------------------------------------------
	  radius
	------------------------------------------------------------ */
	// 10,20, ... ?

	// rads
	// 10,20,30,..?
	--radius--xs: 0.125rem; // ≒ 2px
	--radius--s: 0.25rem; // ≒ 4px
	--radius--m: 0.625rem; // ≒ 8px
	--radius--l: 1rem; // ≒ 12px
	--radius--xl: 1.75rem; // ≒ 20px
	// --radius--2xl: 1.875rem; // ≒ 30px
	--radius--full: 999px;

	/* ------------------------------------------------------------
	  shadow
	------------------------------------------------------------ */
	// --bxsh:'
	// --shadow--alpha: 8%;
	// --shadow--hsl: 215 8% 10%;
	// --sh-color: hsl(215 8% 16% / 10%);
	--sh-hsl: 215 8% 12%;
	--sh-a: 8%;
	// --sh-a--base: 5%;
	// --sh-color--base: hsl(var(--sh-hsl) / var(--sh-a--base));
	// --sh-color: hsl(var(--sh-hsl) / var(--sh-a));

	// shadow:
	//    x:yのオフセット比率は一定に保つ. デフォルトは 1:2 の比率。
	//    差は倍になっていく
	--sh-size--0: 0.5px 1px 2px 0;
	--sh-size--1: 1px 2px 4px 0;
	--sh-size--2: 2px 4px 8px 0;
	--sh-size--3: 4px 8px 16px 0;
	--sh-size--4: 8px 16px 32px 0;
	--sh-size--5: 16px 32px 64px 0;

	// カラー変数込みで変数をセットしてしまうと、--sh-color がこの時点で固定されてしまう。
	// --sh-size-1: 0.5px 1px 1px 0 var(--sh-color);

	--sh--1: var(--sh-size--0) hsl(var(--sh-hsl) / var(--sh-a)),
		var(--sh-size--1) hsl(var(--sh-hsl) / calc(var(--sh-a) + 4%));
	--sh--2: var(--sh-size--1) hsl(var(--sh-hsl) / var(--sh-a)),
		var(--sh-size--2) hsl(var(--sh-hsl) / calc(var(--sh-a) + 5%));
	--sh--3: var(--sh-size--2) hsl(var(--sh-hsl) / var(--sh-a)),
		var(--sh-size--3) hsl(var(--sh-hsl) / calc(var(--sh-a) + 6%));
	--sh--4: var(--sh-size--3) hsl(var(--sh-hsl) / var(--sh-a)),
		var(--sh-size--4) hsl(var(--sh-hsl) / calc(var(--sh-a) + 8%));
	--sh--5: var(--sh-size--4) hsl(var(--sh-hsl) / var(--sh-a)),
		var(--sh-size--5) hsl(var(--sh-hsl) / calc(var(--sh-a) + 12%));

	--sh--i1: inset var(--sh-size--0) hsl(var(--sh-hsl) / var(--sh-a)),
		inset var(--sh-size--1) hsl(var(--sh-hsl) / calc(var(--sh-a) + 4%));
	--sh--i2: inset var(--sh-size--1) hsl(var(--sh-hsl) / var(--sh-a)),
		inset var(--sh-size--2) hsl(var(--sh-hsl) / calc(var(--sh-a) + 5%));
	--sh--i3: inset var(--sh-size--2) hsl(var(--sh-hsl) / var(--sh-a)),
		inset var(--sh-size--3) hsl(var(--sh-hsl) / calc(var(--sh-a) + 6%));

	// --sh--2: var(--sh-size--1) hsl(var(--sh-hsl) / var(--sh-a)),
	// 	var(--sh-size--2) hsl(var(--sh-hsl) / var(--sh-a));
	// --sh--3: var(--sh-size--2) hsl(var(--sh-hsl) / var(--sh-a)),
	// 	var(--sh-size--3) hsl(var(--sh-hsl) / var(--sh-a));
	// --sh--4: var(--sh-size--3) hsl(var(--sh-hsl) / var(--sh-a)),
	// 	var(--sh-size--4) hsl(var(--sh-hsl) / var(--sh-a));
	// --sh--5: var(--sh-size--4) hsl(var(--sh-hsl) / var(--sh-a)),
	// 	var(--sh-size--5) hsl(var(--sh-hsl) / var(--sh-a));

	// --bxsh--1: inset var(--sh-size--0), inset var(--sh-size--1);
	// --bxsh--2: inset var(--sh-size--1), inset var(--sh-size--2);
	// --bxsh--3: inset var(--sh-size--2), inset var(--sh-size--3);
	// --bxsh--4: inset var(--sh-size--3), inset var(--sh-size--4);

	/* ------------------------------------------------------------
	  filter
	------------------------------------------------------------ */
	--filter--blur: blur(4px);
	// --filter--blur--l: blur(8px);
	--filter--lighten: brightness(1.15);
	--filter--darken: brightness(0.85);
}

@supports (content-visibility: auto) or (top: 0lh) {
	// cqw を算出値で保持するために登録済みカスタムプロパティとして定義
	// @property --sh-color {
	// 	syntax: '<color>';
	// 	initial-value: hsl(215 8% 8% / 8%);
	// 	inherits: false;
	// }

	// <length> inherit <color>
}

// ↓ space: これでもわりとしっくりくる...？ 2:.25, 3: 0.375
// 10: .25
// 20: 0.375
// 30: 0.625
// 40: 1
// 50: 1.625
// 60: 2.625
// 70: 4.25
// 80: 6.875
// 90: 11.125
// 100: 18
