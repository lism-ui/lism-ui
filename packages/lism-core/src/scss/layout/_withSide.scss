@use '../query' as query;

.is--side {
	grid-area: side;
}

// data-lism-side が指定されている時、gridで配置を切り替える
// point: fxgの比率を 1:でかい数 にして、fix側を広がらないようにする。
// memo: flex-grow は 変数指定だと挙動が変になる。
.l--withSide {
	--side-w: auto;
	--gd: '.' 'side' / auto;
	--gd--hz: 'side .' / var(--side-w) 1fr; // 横並び (horizontal) 時のプロパティ

	display: grid;
	grid: var(--gd);

	// "xxx start": 縦並びの時に side を上
	&:where([data-lism-side$='start']) {
		--gd: 'side' '.' / auto;
	}

	// "end xxx": 横並びの時に side を end 方向
	&:where([data-lism-side^='end']) {
		--gd--hz: '. side' / 1fr var(--side-w);
	}

	// &:where(.-gd\@sm) {
	// 	--sm-gd: var(--gd--hz);
	// }
	// &:where(.-gd\@md) {
	// 	--md-gd: var(--gd--hz);
	// }
}

@include query.bp-up('sm') {
	.l--withSide:not([class*='-gd@']) {
		--gd: var(--gd--hz);
	}
}

.l--withSide:not([data-lism-side]) {
	--main-minW: 50%;
	display: flex;
	flex-wrap: wrap;
}
:where(.l--withSide:not([data-lism-side])) {
	// &[data-side='first'] > :first-child,
	// &[data-side='last'] > :last-child,
	> .is--side {
		flex-basis: var(--side-w);
		flex-grow: 1; // fxg を 0 にすると、折り返されたときに広がらないので 1 にする必要がある
	}

	// &[data-side='first'] > :last-child,
	// &[data-side='last'] > :first-child,
	> :not(.is--side) {
		flex-basis: 0;
		flex-grow: 9999999; // できるだけ fix側を 指定値ピッタリに近づける
		min-width: min(100%, var(--main-minW)); // このサイズが折り返しポイント
	}
}
