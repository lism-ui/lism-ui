// 内部のコンテンツ幅を制御する。
:where(.is--container) {
	container-type: inline-size;
	margin-inline: auto;
	inline-size: 100%; // gridやflex内での挙動を考慮。（container-type:inline-sizeだと横幅つぶれる）
	// 	--wide-size: 100%;
	> * {
		--maxIs: var(--item-size, 100%);
		max-inline-size: min(100%, var(--maxIs, 100%));
		margin-inline: auto;
	}
}

// 基本的には .is--container と併用する
// [data-content-size],
// .has--size
// [class*='-contentSize:'] {
// 	--size: 100%;
// 	--wide-size: 100%;
// 	> * {
// 		max-inline-size: min(100%, var(--size));
// 		margin-inline: auto;
// 	}
// }

// それぞれの直下要素( > * ) に対してスタイルをセットした方が、ネスト時の影響をなくせるが、constrainedのネストが多様されることは少ないと思うので、一旦親側の変数管理のみで実装。
// .-container\:s
// .-container\:xs {
// 	--size: var(--size--xs);
// 	--wide-size: var(--size--s);
// }
.-container\:s {
	--item-size: var(--size--s);
	--wide-size: var(--size--m);
}
.-container\:m {
	--item-size: var(--size--m);
	--wide-size: var(--size--l);
}
.-container\:l {
	--item-size: var(--size--l);
	--wide-size: var(--size--xl);
}
