@use 'sass:map';
@use 'sass:list';
@use 'sass:string';

@use '../query' as query;
@use '../setting' as setting;

@function get_important($is_important) {
	@if $is_important {
		@return ' !important';
	}
	@return '';
}

@mixin echoBaseUtil($key, $prop, $base_type, $important) {
	@if $base_type == 2 {
		[class*='-#{$key}:'] {
			#{$prop}: var(--#{$key}) #{$important};
		}
	} @else if $base_type != 0 {
		.-#{$key}\: {
			#{$prop}: var(--#{$key}) #{$important};
		}
	}
}

// 各プロパティのユーティリティクラス
@mixin echoUtilities($key, $prop, $utilities, $base_type, $important) {
	@each $ukey, $value in $utilities {
		$selector: '';
		$has_comma: string.index($ukey, ',');

		@if $has_comma {
			$ukeys: string.split($ukey, ',');

			@for $i from 1 through list.length($ukeys) {
				$_selector: '.-#{$key}\\:#{list.nth($ukeys, $i)}';
				@if $i == 1 {
					$selector: $_selector;
				} @else {
					$selector: $selector + ',' + $_selector;
				}
			}
		} @else {
			$selector: '.-#{$key}\\:#{$ukey}';
		}

		@if $base_type == 2 {
			#{$selector} {
				--#{$key}: #{$value};
			}
		} @else {
			#{$selector} {
				#{$prop}: #{$value} #{$important};
			}
		}
	}
}

// @mixin echoSpecialUtilities($key, $utilities, $important) {
// 	@each $ukey, $value in $utilities {
// 		$selector: '.-#{$key}\\:#{$ukey}';
// 		$style: '#{$selector}{#{$value}}';

// 		// 文字列をそのまま出力できない...
// 		// $style;
// 	}
// }

$bp_support_list: (); // list

@each $key, $data in setting.$props {
	$prop: map.get($data, prop); // 対応するCSSプロパティ名
	$base_type: map.get($data, base_type); // 基本セレクタの種類
	$is_important: map.get($data, important);

	$important: get_important($is_important); //を付けるかどうか;

	// ベースセレクタの出力
	@include echoBaseUtil($key, $prop, $base_type, $important);

	// utilityクラスのリストをまずは $data から取得
	$utilities: map.get($data, utilities);
	@if $utilities {
		// 文字列の場合はそれをキーとして別マップから取得
		@if (type-of($utilities) == string) {
			$utilities: map.get(setting.$utilities, $utilities);
		}

		// リストの場合はそれぞれをキーとして別マップから取得
		@if (type-of($utilities) == list) {
			$merged_utilities: ();
			@each $utilkey in $utilities {
				$merged_utilities: map.merge(
					$merged_utilities,
					map.get(setting.$utilities, $utilkey)
				);
			}
			$utilities: $merged_utilities;
		}
	} @else {
		// $data.utilities の指定がない場合は、setting.$utilities から $key で探してみる。
		$utilities: map.get(setting.$utilities, $key);
	}

	// ユーティリティクラスのリストが取得できていれば出力
	@if $utilities {
		@include echoUtilities($key, $prop, $utilities, $base_type, $important);
	}

	// 少し特殊・複雑なユーティリティクラス→一旦直書き。
	// $special_utilities: map.get($data, special_utilities);
	// @if $special_utilities {
	// 	@include echoSpecialUtilities($key, $special_utilities, $important);
	// }

	// BPクラスを出力するプロパティのリストを作成
	$bp_support: map.get($data, bp);

	// $bp_support が 1 または 文字列か
	@if $bp_support == 1 or type-of($bp_support) == string {
		$bp_support_list: list.append($bp_support_list, $key);
	}
}
// @debug $bp_support_list;

// query.$breakpoints のキーだけを抽出したリストを取得
$bp_names: map.keys(query.$breakpoints);

/* __stylelint-disable */

// BPサポートしてるプロパティのリストをループ
@each $key in $bp_support_list {
	$prop_data: map.get(setting.$props, $key);
	$prop_name: map.get($prop_data, prop);
	$base_type: map.get($prop_data, base_type);
	$prop_bp_data: map.get($prop_data, bp);
	$is_important: map.get($prop_data, important);
	$support_bp: query.$support_bp;

	// memo: Note: base_type: 0 の時、かつBPサポートが有効な場合、インラインスタイルで出力されているのでBPクラスにimoirtantが必要（現状はそのような組み合わせは存在しないが）
	@if $base_type == 0 {
		$is_important: 1;
	}

	@if (type-of($prop_bp_data) == string) {
		// サポートするブレイクポイントの上書き指定があれば
		$support_bp: $prop_bp_data;
	}
	//  @else if ($prop_bp_data == 0) {
	// 	// 0 が渡されれば、BPサポートを無効にする
	// 	$output_bps: 0;
	// }

	// debug: $prop_name が 'gap' or 'p' なら$output_bps を 出力してみる
	@if $prop_name == 'gap' or $prop_name == 'flex-direction' or $prop_name == 'padding' {
		@debug $prop_name, $support_bp;
	}

	$flag: true;
	$i: 1;
	@while $flag {
		$bp: list.nth($bp_names, $i);

		@include query.bp-up($bp) {
			.-#{$key}\@#{$bp} {
				#{$prop_name}: var(--#{$bp}-#{$key}) #{get_important($is_important)};
			}
		}

		// サポートするBPまで辿り着いたら終了
		@if $bp == $support_bp or $i == list.length($bp_names) {
			$flag: false;
		}

		$i: $i + 1;
	}

	// $support_bp と一致する list番号 を取得
	// $bp_index: list.index($bp_names, $support_bp);
	// @if $bp_index {
	// 	@for $i from 1 through list.length($bp_names) {
	// 		$bp: list.nth($bp_names, $i);
	// 	}
	// }
}
